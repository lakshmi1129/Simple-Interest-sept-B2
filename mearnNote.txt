  --------------------------------------------------------------------      
                                         MERAN STACK
 --------------------------------------------------------------------


        ------------------------------------------------------------------------------
                                             HTML
        ------------------------------------------------------------------------------

        1. markup language: Rules used to define a document should contain
        2. HTML- Hyper text markup language : used to display contents in webpage
        3. HTML elements : collection of tags
        4. HTML Document: collection of html elements
            - HTML element:  <starting tag> Content </closing tag>
        5. BASIc structure:
                    <html>
                        <head>
                            <title>content</title>
                        </head>
                        <body>
                            contents
                        </body>
                    </html>
        6. Latest vesion: HTML 5
        7. Basic Tags:
                - Heading Tag: h1- h6
                - Paragraph : p tag
                - Bold: b tag
                - Italics :em tag
                - Highlight : mark tag
                - Strike : s tag
                - superlative : sup tag
                - subscript : sub tag
                - Line break : br tag
                - Horizontal line: hr tag
                - Links: a tag
                - Ordered list : ol tag , li tag
                - Unordered List : ul tag , li tag
                - Description List : dl tag, dt tag, dd tag
                - Table: table tag, thead , tbody, tr, td, th
                - Images : img tag
                - video: video tag
                - Embed: iframe tag
                - Container tags: 
                    - div tag
                    - section tag
                    - article tag
                - Form tags
                    - form tag
                    - label
                    - input- text,password, email, number, date, radio, checkbox,range, button, file
                    - select- option
                    - textarea
                    - button

        8. Based on display value of tags in browser, we can classify tags as,
                - Block elements: It takes the entire width of the browser to display content in browser
                    eg: heading tag, p tag
                - Inline elements: It takes only the width of the content
                    eg: a tag, img tag
        9. Semantic tags: describes the meaning to both the browser and user\
            - header tag
            - nav tag
            - section tag
            - article tag
            - aside tag
            - footer tag


        ------------------------------------------------------------------------------
                          CSS -Cascading style
        ------------------------------------------------------------------------------

        1. Used to give sytle to HTML elements
        2. Ways to apply css in html Elements:
            - Inline css:  use style attribute
                syntax: style="property:value";
            - Internal CSS:  use style tag
                syntax:
                         <style>
                            selectors{
                                property:value;
                            }
                        </style>
            -External CSS: uses a external CSS file , we have to link the html file with corresponding CSS file
                syntax: selectors{
                                property:value;
                            }
        3. CSS selectors: used to select html elements in css file
            - use Tag name
            - use id - #
            - use class - .
            - use universal selector - *
            - Grouping selectors
                - grouping selectors: comma
                - Descendant selectors: space
                - child selector: using >
                - sibling selector: using ~
                - immediate sibling selector : +
        4. Box model: padding
                      border
                      margin
        5. CSS properties
                - Float : float elemets in left or right
                - position: 
                        - static
                        - fixed
                        - absolute
                        - relative
                        - sticky
                    -z-index
                -Flexbox: used to display/ arrangemhtml elemts in either row/column
                - flex Container: parent tag which hold elements that to be arranged as row/column, apply flex to parent
                - Justify-content
                -align-items

                - Pseudo class: A pseudo-class is used to define a special state of an element.

                            For example, it can be used to:

                            Style an element when a user mouses over it
                            Style visited and unvisited links differently
                            Style an element when it gets focus

                    syntax: selector:pseudo-class {
                                property: value;
                                }
                - grid : used to display elements in row and columns, where user can fix column width
                    - Grid container:display as a grid
                        - grid-template-columns / row : used to set the width of column/row
                        - gap: used to set space between row and columns
                    - grid items
                - linear gradient: is used to set combination of colors as background
                     - syntax: background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
                - Animation in css: animation property, to define @keyframes
                - Animation libraries:
                    - Animate.style:  https://animate.style/
                    - AOS:  https://michalsnik.github.io/aos/
                    - locomotive scroll: 
                - Web hosting:
                    - netlify
                    - github pages
                    - Vercel
                -  Media Quries: Used to design responsive web pages
                    - Media queries can be used to check many things, such as:

                               - width and height of the viewport
                               - orientation of the viewport (landscape or portrait)
                                - resolution
                        - Use @media keyword: 
                            @media not|only mediatype and (media feature) and (media feature) {
                                CSS-Code;
                                }
                        -  Screen break points: 
                            - 480px- sm, 760px- md, 992px - lg, 1200px - xl


            ------------------------------------------------------------------------------
                            Bootstrap- CSS FRAMEWORK
            ------------------------------------------------------------------------------
            1. Used to build fast , responsive sites
            2. uses predefined class of styles, Common bootstrap classes,
                - container-fluid/ container 
                - border
                - color: success- green
                         danger-red
                         warning - orange
                         primary- blue
                         info - sky blue
                         dark - black
                         light - white
                         secondary- grey
                - margin: m/mt/mb/ms/me - 1/2/3/4/5
                - text center: text-center
                - padding: p/pt/pb/ps/pe - 1/2/3/4/5
                - text-color
                - image:img-fluid
                - width: w-25/50/75/100
                - fs -1/2/3/4/5
                - fw - bold/bolder/
                - button: btn 
                - Grid
                    - row: maximum divided into 12 equal parts
                    - cols: 









                                                
  ------------------------------------------------------------------------------
                     GIT and GITHUB
  ------------------------------------------------------------------------------

  1. Git : used to control the version of a code
  2. git commands:
            - git status:  used to check git status inside a folder
            - git init: used to create/ initalize git repository in a folder
            - git add .: track untracked files to git
            - git commit -m "message" : used to store/save tracked files to git
            - git remote add origin url-of github-repo: to initiallyy link github repository with git repo
            - git push origin master: used to push git code to github origin master


    ------------------------------------------------------------------------------
                     Figma
    ------------------------------------------------------------------------------

    ------------------------------------------------------------------------------
                    Java script-JS
    ------------------------------------------------------------------------------

    1. Node js: It is a collection of JS libraries & runtime environment for JS
    2. Basic concepts of JS:
        - Displaying contents: console.log(content) method
        - Data Types: 
            - number
            - string:  inside a single/double quotes.
            - boolean: true/false
            - undefined
        - Joining different types of data in JS
            - using commas
            - using Concantenation: using +, convert all content into string
            - Template Literals: combine different types of datawithin a backtick symbol, it uses ${variable_name } to display variables
        - Variable: Used to store data
        - Identifieres: set of rules which defines what name should assign  to a variable.
        - Create a variable:  In 3 different Ways
            - Using var keyword: syntax: var variableName / var variable_name
            - Using const keyword: syntax: const variableName = value
            - Using let keyword:  syntax: let variableName =value
        - Hoisting: moving  a variable declaration to the top of the code
        - Difference betweeen different varibles  in JS:

                        var                                          const                                           let
                --------------------------------------------------------------------------------------------------------------------

                1. using var keyword                          using const keyword                             using let keyword
                2. Global scope                               Block scope                                     Block scope
                3. Reassignment is possible                   Cannot reassign its value                       Can reassign its value
                4. Hoisting with initial value                Hoisting without initial value                  Hoisting without initial value
        - Operators in JS
            - Assignment operator : =
            - Arithemetic operators : + - * / % **
            - Relational operators : > < >= <= == === != return boolean
            - Logical operators : && || ! return boolean

                        &&                              ||                         !
                ----------------------------------------------------------------------------
                T && T = T                     T || T = T                      T ! F
                T && F = F                     T || F = T                      F ! T
                F && T = F                     F || T = T
                F && F = F                     F || F = F
            - Increment / decrement operator : ++, --
            - Short hand operator: +=,-=,*=
            - Ternary operator:  condition? executes when true : executes when false
            - truthy operator : condition && executes when true
            - spread operator :  used to spread an iterating variable to a single array, symbol is ...
            - REST operator :  used to combine rest of the data to a single array. use operator ...
        - Decision making/ conditional   statements:
            - if statement: syntax- if(condition){statements which executes when condition is true}
            - if-else statements: syntax: if( condition){condition true} else{condition false}
            - else if ladder
            - switch statements:  switch(expression){
                case answer1: statement
                break;
                case answer2 :statement
                break;
                default: statements;
            }
        - Looping statements: Used to repeate  same task multiple times.
            - while loop: Syntax -
                1. Initialize a variable
                2.  while(condition using variable){
                    - While condition true , executing statements
                3. change th evalue of variable used in condition
                }
            - for loop:  syntax:
                    for(initialize a variable;condition using variable;change the value of variable){
                        for loop body executes only when condition true
                    }
                - break statements:  Used whenever we want to break the execution of a loop
                - continue statements : used to skip loop for certain condition
            - Nested loops:  A loop inside another loop
                - syntax: outer_loop{
                                innerLoop{
                                    execution stops first
                                }
                          }
        - Functions: used to perform a specific task, normal fuctions are hoiested
            -Function Definition part : define task to be performed
                - syntax:  function fun_name(arg1, arg2....){
                    function body where we can define the task to be performed.  using arguments
                }
            - Function call part:  used to execute function in JS
                - syntax: fun_name(para1,para2....)
            - return statement used to return the execution from definition to function call along with value from its definition, return must define at the end of the function definition.
            - Types of function:
                - Predefined function: eg. Math.floor(),console.log(),Number()
                -  Arrow function: used as an alternative for normal function definition
                    - syntax:
                         var/const/let  funName = (arg1, arg2....) =>{ define function body to perform task}
                - Callback function: A function definition inside another function call
                    - syntax: 
                            functionName( ()=>{function body})
                - Anonymous functions/ nameless functions: they are self executing   functions
                -Recursive functions/repeating functions:  used to perform a task repeatedly,  function call inside its own definition
                    - syntax: function funName() { .... funName()}  
                - Nested functions: function definition inside another function definition    
                 - Closure property  : In nested functions child function can access parent data  
        - Array : Used to store multiple values to a single variable 
            - Displaying each item by item of an array, by using:
                    - for loop   
                    - for of loop
                    - for in loop
            - Array methods:
                - push(new element) - to insert an item in an array at the end  
                - unshift(new element) - to insert an item in an array at the start
                - pop() - delete an item from the end of an array 
                - shift() - delete an item from the start of an array
                - sort(compareFun) - used to sort an existing array in ascending/descending order
                - forEach(callBackfun) - used as an alternative for for of loop
                - filter(callBackFun) - create a new array with values satisfing particular condition from existing array
                - find(callBackFun) - return a value which satisfies condition applied in the existing array
                - map(callbackfun) - return a new array with values appling some function to whole data in existing array
                - reduce(callBackFun) - return last  value either lowest/highest/total from the existing array
                - reduceRight(callBackFun) - return first value either lowest/highest/total from the existing array
                - some(callBackFun): return a boolen value which satisfing condition applied in an existing array.
                - every(callBackFun): return a boolen value which satisfing condition is satisfies all values in an existing array.
                - flat(depth): return new array with reduced dimension of an array to ite depth value. if depth value is Infinity then flat will always return 1 dimension array.
                - includes(arrayitem): returns a boolean based on array value present in the existing array or not
                - indexOf(arrayItem): return the index of corresponding item.  otherwise return -1.
                - splice(index starting, delete count):  return a new array with removed items, it changes the existing by removing item from it
                - reverse(): return new reverse an existing array
                - concat(item): return new array to join item with existing array
                - join (seperator) : used to return string of array item seperated with given seperator. 
        - String :
                - str.length - to find the charecters
                - str.toUpperCase: convert to capital letters
                - str.LowerCase: convert to lower case
                - str.substring(startingIndex, endingIndex):  to cut a substring
                - str.slice(startingIndex, endingIndex) : same use as of subString- also can eliminate charecters form the end of a string.
                - str.startsWith(charecter): return boolean
                - str.endsWith(charecter): return boolean
                - sentance.split(seperator): used to  seperate words/charecters.
                - str.includes(substring):  returns boolean.
        - Object :  Used to store data as key-value pairs, within a {key:value1, key:value2....}
            - To access values in an object:
                - Bracket Notation: objectname["key"]
                - Dot notation: objectname.key
            - Check a key is present in object/not
                - use "in"  operator: returns a boolean,  syntax; "key" in objectname
                - use hasOwnProperty(): retuans boolean,  objectName.hasOwnProperty("Key")
            - To insert a value in a an existing object
                - To using assign operator  
                    - objectname["key"]=value / objectname.key = value
                - Object.assign(destination, source)
            - To update existing value use assign operator
            - Object.keys(objectname) : To display all keys  stored in an object , return an array 
            - Object.values(objectname) : To display all values  stored in an object , return an array
            - Object.entries(objectname): return the object as an array
            - delete keyword : To remove property from an object
            - Destructuring of an object:  use to access values of an object without using backet/dot notation
                - const {key1, key2, key3....} = objectName 
        - Exception / run time errors handling in JS : Use try-catch block
        - OOPs : Object oriented programming language
            - Basic concepts:
                - Class : blueprint of object, can have some properties and functions,  use keyword "class",  functions inside a class is methods.  predefined method is "constructor" is initializing class properties.
                - Object : Real word entity/ Instance of a class Used to access class properties/functions outside a class., to create object: new class-name()
                - Reference : "this" keyword  used to link properties/ functions with its own class
            - Basic features :
                - Inheritance: a cass can extend its properties/methods defined in another class.
                    - Classical inheritance: using keyword extends
                    - Prototype Inheritance : using keyword __proto__
                - Polymorphism
                - Abstraction
                - Encapsulation 
            

    ------------------------------------------------------------------------------
                    Java script-JS in FRONT END
    ------------------------------------------------------------------------------

    1. Used to provide behaviour to HTMl elements
    2. Applying JS to HTML elements
        - Internal JS :  JS code in Script tag
        - External JS :  Link External JS file using Script Tag
    3. DOM (Document Object Model) : Tree structure using object corersponding to a webpage
    4. DOM methods :
            - Using tag : document.getElementByTagName("tag")
            - Using Id : document.getElementById("id") / id
            - Using class : document.getElementByClassName("class")
            - Using QuerySelector : document.querySelector("tag/#id/.class")
            - Using QuerySelectorAll : document.querySelectorAll("tag/#id/.class")
    5. Events:  Triggered by user action,  events occured in HTML elements.
            - Mouse related events : click, drag, drop....
            - Keyboard related events: key press,  keydown, key up....
            - Touch related events: 
    6. Handling event in HTML:  events-function-call() inside html element, behaviours change must define as a function in js
    7.  Access/ update content of an HTML element in JS :
        - innerHTML /innerText
    8. Parmanently data storage in browser
        - data will be stored permanently, data stored as key-value pair, type of both key and value must be "string". to convert value to string - use JSON.stringify(value), to parse string data to normal type : JSON.parse(value)
            - Local storage : 
                - setItem(key,value) : used to store data to storage
                - getItem(key) : used to get value from storage
                - removeItem(key) : used to delete a value from storage
                - clear() : used to clear storage
            - Session storage

    9.  Working of JS runtime environment
        - Java script engine : It handles the execution, convert js code to code that is understandable by the broswer engine
        - Call stack : used to keep track of currently executing functions, make sure each one finishes before moving to next.Only one call stack in JS engine thats why it is known as single threaded programming.
            -  2 types of functions:
                - synchronous function : Functions without delay
                - Asynchronous Function : Function with delay
                    - call back functions : Task Queue (Macro Task Queue) setTimeOut 
                    - web API : Micro task Queue which is a priority Queue.
            - Heap : storage for variable and objects in js
            - Event loop: It manages flow of the code, ensuring Asyncronous operation and user interaction run smoothly.
    10. Asynchronous function handling in JS
        - Call back fucnctions:  nesting callback function will lead to "call back hell",   that means js wont give any response 
        - Promise :  Used to resolve asynchronous function , it will definitly return a response, promise can resolve in 2 types:
            - Resolved state:  If asynchronous function call return a response.  we will get the response in then method  
            - Reject state : if the function call retuns nothing that is reject.  we will get reject state in catch method.
        -  Async -Await keywords: To make promise much more easier, to avoid call back from promise, if a function is asyncronous the only we can use await inside the function.
                - Aync keyword: makes a function return a promise
                - await keyword:  makes a function to wait for a promise.
    11. API (Application programming Interface): Used to communicate between application using internet.
        - Types of APIs : based on different communication
            - REST/SOAP APIs  : client/server communication
            - SOCKET : web chatting application
            - GRAPHQL
        - API Testing Tools
            - Postman
            - Thunder Client : VS code extension
    12. URL : Uniform Resource Locator
        - ex: https://jsonplaceholder.typicode.com/users/1
            - Base URL : https://jsonplaceholder.typicode.com
            - URI : Uniform Resource Identifiers - eg: users
            - Path parameters  : numbers associated in url
        - ex : https://www.google.com/search?q=mercury&space
            - Query Parameters : are value after questionmark (?) in url 
    13. HTTP (Hyper Text Transfer protocol) : used to allow application to make request-response via internet
        - HTTP request : Client  will make the request
            - 2 parts:
                - Header part :  to keep secret data
                - Body part : Used to hold data  (Binary/XML/JSON....) to be transfer from client-server
        - HTTP methods:
            - GET : used to get/read data from an app
            - POST : used to create/ store data
            - PUT : used to updata data completly
            - PATCH : used to update data partially 
            - DELETE: used to remove data
        - HTTP response : Server Application provide response
             - HTTP status codes:   to get response status of request, browser is using this HTTP Response
                - 1xx : Informational
                - 2xx : success
                - 3xx : Redirection
                - 4xx : Client errors
                - 5xx : Server error

    14. JSON (JavaScript Object Notation) :  is a data format used to transfer data from one application to another using internet
        - data stored as  key-value pairs, Keys must be 'string' type
            eg: "username" :"lakshmi", "age":26
    15. API call in JS : AJAX ( Asynchronous JavaScript and XMl) -  methods to make api call using JS
        - API call using XMLHTTPRequest(XHR)
            - XMLHTTPRequest class has predefied methods and properties to make sending request & response between Application in internet 
                - Object of XMLHTTPRequest used to interact with server application
                - XMLHTTPRequest class properties:
                    - readyState: return a number which indicates state of a request, if readyState == 4 then request recieves the response.
                    - responseText : return a string that contain the response of the request as text
                    - status : return response status code of the request
                -   XMLHTTPRequest class Methods:
                    - open() : used to initiate a request
                    - send() : send the request
                - Events
                    - onreadystatechange : event to occur whenever the readyState changes
                - Steps to make API call using XMLHTTPRequest
                    1. create an object for XMLHTTPRequest class
                    2. Initialize the request using open method
                    3. send the request
            - fetch() method:  function returns a promise,  then resolved response will get from "then method" and reject response get from "catch method"
    16. Javascript modules: used to share data from one file to another, can used in 3 types: 
        - Export statements:  
            - export default keyword: this keyword must be at the end of the file
            - export keyword : used to exort multiple data from a single js file
        - import statements:  used to use the export data from another js file
            - import with curly braces: if data exported using 'export keyword'
            -import witout curly braces: if data exported using 'export default keyword'            

    ------------------------------------------------------------------------------
                    React -  Advanced FrontEnd Application Library
    ------------------------------------------------------------------------------

    1. Basic React  
        - React App is a collection of different libraries.
        - React App consists of different "components",  which used to display contents in browser, in react app, all components are arranged in a tree structure.  Tree structure has a single parent/root node which is by default known as "App component".  components are reusable.
        - Pure JS Functions to build components,  it return how to display contents in browser. pure function are capable of doing only one task with the help of its argumts. Functions without side Effects.
        - Declarative Approach
        - Virtual DOM : Light weigth memory representation of real DOM.
        - Babel library:  used to display contents into browser.
        - JSX(Javascript XML): JS extention for writing HTML code in Javascript. 
            eg: const data = <h2>Company Name</h2>
            - Every JSX element must be inside  a single tag . parent tag can be any container tag(div, section, article) or  or react fragments (<> </>) tag without name is known a s react fragments.
            -  Every JSX code should have closing tag,  
                - tags with content: <starting tag>content </closing tag>
                - tags without content: <starting tag> </closing tag> / self closing tags:
                    <startingtag/>
                - Instead of Attribute "class" use "className" in jsx
                - Instead of Attribute "for"  use "htmlFor" in jsx
                - In JSX we have to use "camelCase" to write elemets/ content : eg: fontWeigth, onClick
                - In JSX, we can directly pass js code inside a curly braces, eg: {JS code}
    
    2. React APP creation
        - CRA(using create-react-app command)
        - Vite:  tool for building web application
            - Installing vite globally: npm i -g create-vite    
            - react app creation using Vite: npm create vite@latest reactAppName -- --template react
    3. files and folders of react app using vite
        - package.json file: npm configuration file for the project
        - package-lock.json file: used to hold version of dependent package of the project
        - node modules: used to locally store dependent packages of project, we can generate node_modules folder with the help of command npm Installing
        - public folder: used to hold data that can be accessed by any part of the project.
        - index.html file: entry point of react app, react app will display in index.html file
        - src folder: logic of react app is defined here. 
            - main.jsx:  define the logic to render (displaying in browser) react app in html element with id as 'root'
                - createRoot() createRoot lets you create a root to display react components inside a browserDOM node.
            - css file: used for styling
            - App.jsx: used to create react root component
            - asset folder: used to hold media files used in react project
    4. Components:  part of user interface. used to display content in browser, to create a component, create a js/jsx file with fileName starts with capital letter.
        - creating components in 2 ways:
            - Function based components/stateless components:  uses js pure functions to build component, function name must similar to its file name. function return jsx code.
            - Class components/ statefull components:  uses class to create components. class inherits react component class. render method in class used to return jsx.
                - to create state. it has to call super method in its constructor to get its parent features. state is an object, where we can store value as key-value pairs, to update the state use a predefined method setState() pass its argument as updated value of state.
        - Life cycle of React components:
                - Mounting phase: Putting JSX into DOM
                    - constructor()
                    - getDerivedStateFromProps()
                    - render()
                    - componentDidMount()
                - Updating phase: when a component get updated.
                    - getDerivedStateFromProps()
                    - getSnapshotBeforeUpdate()
                    - shouldComponentUpdate()
                    - render()
                    - componentDidUpdate()
                - Unmounting Phase: Removing component from DOM
                    - componentWillUnmount()

            Class  components                          Function based compoenents
    ----------------------------------------------------------------------------------
    1. using class to create ,                      1. using pure JS functions and return
        render method must return jsx                   jsx
    2. Statefull components                         2. Stateless components
    3. Hooks are not used                           3. Hooks are used
    4. need constructor to initialize               4. No need of constructor
        state
    5. Life cycle methods are available             5. Life cycle methods are not available



    5. Data sharing between React component
        - Data can be shared from parent to child: using "props"
    6. Props: Is a property  of a component. It is an object used to transfer data from parent component to child component. , parent data can be shared via child tag attribute. To access parent data in child we have props.  props used in the child component function argument.
    7. Conditional rendering: used based on condition rendering jsx elements in browser, using if-else statements(ternary operator ?:) if statements(&& operator)
    8. List in React: Use map array method. set a key attribute to duplicating jsx element in a list
    9. CSS styling in recat: Different ways to apply css to jsx elements
        - Inline Css: using style attribute to apply style to jsx element, style must be as js object
            - syntax: style={{cssProperty: value,....}}
        - External CSS: Define css style in an external css file. Link css file to component file using import statements. We cannot import csss file to a variable in component file
            - import 'css file path'
        - using CSS module files:  file extension should be .module.css this type of file is 'module file'. In this we have to define style in class. To use module css file we have to import it to the component file.
            - Import  variableName from 'Modulefile path', to apply style in component , use variable.classname
        - Important CSS styling component libraries:
            - Material UI: npm install @mui/material @emotion/react @emotion/styled
    10. Event Handling in React: syntax: event={functionCall}
            - Binding function without argument: event ={functionName}
            - Binding function with arguments: event ={()=>functionname(arguments)}
            - Binding Function with arguments as events: event ={(event)=>functionName(event)}
    11. State in React:  used to store data of a component. when state value changes, the component will rerender
    12. Hooks in React:  Predefined methods in react is known as hooks. used to provide react component features to functional component. To use a hook in a functional component, it has to call the hook.
        -Rules to call hooks in functional component
            - import hook in functional component
            -  to use hook in component call the hook in top level of component.
            - Hooks cannot be conditional
        - Based on react features there are different types of hooks available
            - Build in hooks:
                 - useState(initial value) hook: used to create state in functional component, this hook will return an array of 2 argument.  first argument: state, second argument: function used to update state
                 - useEffect(callbackfn, dependency): used to apply side effects of the functional component. we can pass side effect in its first argument ad a call back function. we can also pass an optional dependency argument to decide when to apply side effects in component.
                    - dependency dirrent values:
                        - no value:  side effects will apply to the compoenet all the time, which leads to an infinite loop.
                        - empty array : side effects will apply to the component only at the time of loading the component in DOM
                        - [state/props/variable_name] : side effects will apply to the component only at the  time of loading the component in DOM but also whenever the value of state/props/ varbale_name given in the dependency changes.
                 - useRef(initial value):  is a react hook  that lets you reference a value thats not needed for rendering. initialValue is optional in useRef hook. it return an object with 'current' key
            - Custom hooks:  create js file to define a specific function for a special task. export the function from that file. function name  must start with 'use' keyword
    13. Form handling in React:  there are 2 ways to manage data inside the form by a component.
        - Controlled components: there are  components which store form data inside its own state
        - Uncontrolled components: component who access form data using its DOM elements reference
